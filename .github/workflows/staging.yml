name: Deploy to Staging

on:
  push:
    branches: [ develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, zip, opcache
          coverage: none

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Run tests
        run: php bin/phpunit

  deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/staging-upwork-tracker-app
            
            # Pull latest code
            git fetch origin develop
            git reset --hard origin/develop
            
            # Set environment variables from GitHub Secrets
            export MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD_STAGING }}
            export DATABASE_URL=mysql://upwork-tracker:${MYSQL_PASSWORD}@staging-upwork-tracker-mysql:3306/upwork_tracker_staging
            export UPWORK_API_KEY=${{ secrets.UPWORK_API_KEY }}
            export UPWORK_API_SECRET=${{ secrets.UPWORK_API_SECRET }}
            export UPWORK_CALLBACK_URL=https://staging-upwork-tracker.oussema-sferi.dev/oauth/upwork/callback
            
            # Stop existing containers
            docker-compose -f docker-compose.staging.yml down || true
            
            # Build and start containers
            docker-compose -f docker-compose.staging.yml up -d --build
            
            # Wait for services to be ready
            sleep 10
            
            # Install dependencies (including dev dependencies for staging)
            docker-compose -f docker-compose.staging.yml exec -T php composer install --optimize-autoloader --no-interaction
            
            # Create database if not exists
            docker-compose -f docker-compose.staging.yml exec -T php php bin/console doctrine:database:create --if-not-exists --env=dev --no-interaction
            
            # Update database schema directly (bypass migrations for staging)
            docker-compose -f docker-compose.staging.yml exec -T php php bin/console doctrine:schema:update --force --env=dev --no-interaction
            
            # Clear cache
            docker-compose -f docker-compose.staging.yml exec -T php php bin/console cache:clear --env=dev --no-interaction
