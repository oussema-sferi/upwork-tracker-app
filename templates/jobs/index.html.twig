{% extends 'admin/base.html.twig' %}

{% block title %}Jobs{% endblock %}

{% block body %}
<div class="content-wrapper">
    <div class="row">
        <div class="col-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <div>
                            <h4 class="card-title">Upwork Jobs</h4>
                            <p class="text-muted mb-0">
                                <i class="icon-briefcase"></i>
                                Total: <strong id="total-jobs">{{ pagination.total_items }}</strong> jobs found
                                {% if pagination.total_pages > 1 %}
                                    (Page {{ pagination.current_page }} of {{ pagination.total_pages }})
                                {% endif %}
                            </p>
                        </div>
                        <div class="d-flex align-items-center">
                            <form method="get" class="d-inline mr-3">
                                <div class="form-group mb-0">
                                    <label for="per_page" class="sr-only">Items per page</label>
                                    <select name="per_page" id="per_page" class="form-control form-control-sm" onchange="this.form.submit()">
                                        {% for option in allowedPerPage %}
                                            <option value="{{ option }}" {% if perPage == option %}selected{% endif %}>
                                                {{ option }} per page
                                            </option>
                                        {% endfor %}
                                    </select>
                                </div>
                                <input type="hidden" name="page" value="{{ pagination.current_page }}">
                                {% if search %}
                                    <input type="hidden" name="search" value="{{ search }}">
                                {% endif %}
                            </form>
                            <form method="post" action="{{ path('app_jobs_fetch') }}" class="d-inline">
                                <button type="submit" class="btn btn-primary">
                                    <i class="icon-refresh"></i>
                                    Fetch New Jobs
                                </button>
                            </form>
                        </div>
                    </div>

                    <!-- Search Section -->
                    <div class="row mb-4">
                        <div class="col-md-8">
                            <div class="form-group">
                                <label for="search-input" class="form-label">Search Jobs</label>
                                <div class="input-group">
                                    <input type="text" 
                                           id="search-input" 
                                           class="form-control" 
                                           placeholder="Search in job title or description..."
                                           value="{{ search ?? '' }}"
                                           autocomplete="off">
                                    <div class="input-group-append">
                                        <button type="button" id="clear-search" class="btn btn-outline-secondary" style="display: none;">
                                            <i class="fa fa-times"></i>
                                        </button>
                                    </div>
                                </div>
                                <small class="form-text text-muted">Search results will appear as you type</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label class="form-label">Search Results</label>
                                <div class="alert alert-info mb-0" id="search-results-info" style="display: none;">
                                    <i class="fa fa-search"></i>
                                    <span id="search-results-count">0</span> jobs found
                                </div>
                                <div class="alert alert-warning mb-0" id="search-loading" style="display: none;">
                                    <i class="fa fa-spinner fa-spin"></i>
                                    Searching...
                                </div>
                            </div>
                        </div>
                    </div>

                    {% for message in app.flashes('success') %}
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            {{ message }}
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    {% endfor %}

                    {% for message in app.flashes('error') %}
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            {{ message }}
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    {% endfor %}

                    {% for message in app.flashes('info') %}
                        <div class="alert alert-info alert-dismissible fade show" role="alert">
                            {{ message }}
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    {% endfor %}

                    {% if jobs is empty %}
                        <div class="text-center py-5">
                            <i class="icon-briefcase" style="font-size: 4rem; color: #ccc;"></i>
                            <h5 class="mt-3">No jobs found</h5>
                            <p class="text-muted">Click "Fetch New Jobs" to search for jobs based on your settings.</p>
                        </div>
                    {% else %}
                        <!-- Bulk Actions -->
                        <div class="mb-3">
                            <button type="button" class="btn btn-danger" id="bulkDeleteBtn" disabled>
                                <i class="icon-trash"></i>
                                Delete Selected (<span id="selectedCount">0</span>)
                            </button>
                        </div>

                        <form id="bulkDeleteForm" method="post" action="{{ path('app_jobs_bulk_delete') }}">
                            <!-- Hidden inputs will be added dynamically -->
                        </form>

                        <div class="table-responsive">
                            <table id="jobs-table" class="table table-striped">
                                <thead>
                                    <tr>
                                        <th width="50">
                                            <input type="checkbox" id="selectAllCheckbox" title="Select All">
                                        </th>
                                        <th>Title</th>
                                        <th>Budget</th>
                                        <th>Country</th>
                                        <th>Posted</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for job in jobs %}
                                        <tr>
                                            <td>
                                                <input type="checkbox" class="job-checkbox" value="{{ job.id }}">
                                            </td>
                                            <td>
                                                <strong>{{ job.title }}</strong>
                                                {% if job.skills %}
                                                    <br><small class="text-muted">{{ job.skills }}</small>
                                                {% endif %}
                                            </td>
                                            <td>{{ job.budget ?? 'Not specified' }}</td>
                                            <td>
                                                {% if job.client %}
                                                    {{ job.client.location }}
                                                    {% if job.client.isVerified() %}
                                                        <span class="badge badge-success badge-sm ml-1">
                                                            <i class="fa fa-check-circle"></i>
                                                        </span>
                                                    {% endif %}
                                                {% else %}
                                                    Unknown
                                                {% endif %}
                                            </td>
                                            <td>{{ job.postedAt|date('M d, Y') }}</td>
                                            <td>
                                                <a href="{{ path('app_jobs_show', {'id': job.id}) }}" class="btn btn-sm btn-info">
                                                    <i class="icon-eye"></i>
                                                    View
                                                </a>
                                                <button type="button" class="btn btn-sm btn-danger delete-job-btn" data-job-id="{{ job.id }}" data-job-title="{{ job.title }}">
                                                    <i class="icon-trash"></i>
                                                    Delete
                                                </button>
                                            </td>
                                        </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination Controls -->
                        {% if pagination.total_pages > 1 %}
                            <nav aria-label="Jobs pagination" class="mt-4">
                                <ul class="pagination justify-content-center">
                                    <!-- Previous Page -->
                                    {% if pagination.has_previous %}
                                        <li class="page-item">
                                            <a class="page-link" href="{{ path('app_jobs_index', {'page': pagination.previous_page, 'per_page': perPage}) }}">
                                                <i class="icon-arrow-left"></i> Previous
                                            </a>
                                        </li>
                                    {% else %}
                                        <li class="page-item disabled">
                                            <span class="page-link">
                                                <i class="icon-arrow-left"></i> Previous
                                            </span>
                                        </li>
                                    {% endif %}

                                    <!-- Page Numbers -->
                                    {% set startPage = max(1, pagination.current_page - 2) %}
                                    {% set endPage = min(pagination.total_pages, pagination.current_page + 2) %}
                                    
                                    {% if startPage > 1 %}
                                        <li class="page-item">
                                            <a class="page-link" href="{{ path('app_jobs_index', {'page': 1, 'per_page': perPage}) }}">1</a>
                                        </li>
                                        {% if startPage > 2 %}
                                            <li class="page-item disabled">
                                                <span class="page-link">...</span>
                                            </li>
                                        {% endif %}
                                    {% endif %}

                                    {% for pageNum in startPage..endPage %}
                                        <li class="page-item {% if pageNum == pagination.current_page %}active{% endif %}">
                                            {% if pageNum == pagination.current_page %}
                                                <span class="page-link">{{ pageNum }}</span>
                                            {% else %}
                                                <a class="page-link" href="{{ path('app_jobs_index', {'page': pageNum, 'per_page': perPage}) }}">{{ pageNum }}</a>
                                            {% endif %}
                                        </li>
                                    {% endfor %}

                                    {% if endPage < pagination.total_pages %}
                                        {% if endPage < pagination.total_pages - 1 %}
                                            <li class="page-item disabled">
                                                <span class="page-link">...</span>
                                            </li>
                                        {% endif %}
                                        <li class="page-item">
                                            <a class="page-link" href="{{ path('app_jobs_index', {'page': pagination.total_pages, 'per_page': perPage}) }}">{{ pagination.total_pages }}</a>
                                        </li>
                                    {% endif %}

                                    <!-- Next Page -->
                                    {% if pagination.has_next %}
                                        <li class="page-item">
                                            <a class="page-link" href="{{ path('app_jobs_index', {'page': pagination.next_page, 'per_page': perPage}) }}">
                                                Next <i class="icon-arrow-right"></i>
                                            </a>
                                        </li>
                                    {% else %}
                                        <li class="page-item disabled">
                                            <span class="page-link">
                                                Next <i class="icon-arrow-right"></i>
                                            </span>
                                        </li>
                                    {% endif %}
                                </ul>
                            </nav>
                        {% endif %}
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Individual Delete Confirmation Modal -->
<div class="modal fade" id="deleteJobModal" tabindex="-1" role="dialog" aria-labelledby="deleteJobModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteJobModalLabel">Confirm Job Deletion</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this job?</p>
                <p><strong id="jobTitleToDelete"></strong></p>
                <p class="text-danger"><i class="icon-alert-circle"></i> This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">
                    <i class="icon-close"></i> Cancel
                </button>
                <button type="button" class="btn btn-danger" id="confirmDeleteJob">
                    <i class="icon-trash"></i> Delete Job
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Bulk Delete Confirmation Modal -->
<div class="modal fade" id="bulkDeleteModal" tabindex="-1" role="dialog" aria-labelledby="bulkDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="bulkDeleteModalLabel">Confirm Bulk Job Deletion</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <strong id="bulkDeleteCount"></strong> selected jobs?</p>
                <p class="text-danger"><i class="icon-alert-circle"></i> This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">
                    <i class="icon-close"></i> Cancel
                </button>
                <button type="button" class="btn btn-danger" id="confirmBulkDelete">
                    <i class="icon-trash"></i> Delete Jobs
                </button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const jobCheckboxes = document.querySelectorAll('.job-checkbox');
    const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
    const selectAllCheckbox = document.getElementById('selectAllCheckbox');
    const selectedCountSpan = document.getElementById('selectedCount');
    
    // AJAX Search functionality
    const searchInput = document.getElementById('search-input');
    const clearSearchBtn = document.getElementById('clear-search');
    const jobsTableBody = document.querySelector('#jobs-table tbody');
    const totalJobsSpan = document.getElementById('total-jobs');
    const paginationContainer = document.querySelector('ul.pagination');
    const searchResultsInfo = document.getElementById('search-results-info');
    const searchResultsCount = document.getElementById('search-results-count');
    const searchLoading = document.getElementById('search-loading');
    let searchTimeout;
    
    // Search on keyup with debounce
    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        const query = this.value.trim();
        
        if (query.length > 0) {
            clearSearchBtn.style.display = 'block';
            searchLoading.style.display = 'block';
            searchResultsInfo.style.display = 'none';
        } else {
            clearSearchBtn.style.display = 'none';
            searchLoading.style.display = 'none';
            searchResultsInfo.style.display = 'none';
        }
        
        searchTimeout = setTimeout(() => {
            performSearch(query);
        }, 300); // 300ms debounce
    });
    
    // Clear search
    clearSearchBtn.addEventListener('click', function() {
        searchInput.value = '';
        this.style.display = 'none';
        searchLoading.style.display = 'none';
        searchResultsInfo.style.display = 'none';
        performSearch('');
    });
    
    function performSearch(query) {
        console.log('Performing search for:', query);
        const url = new URL('{{ path("app_jobs_search") }}', window.location.origin);
        url.searchParams.set('q', query);
        url.searchParams.set('per_page', document.getElementById('per_page').value);
        
        console.log('Search URL:', url.toString());
        
        fetch(url, {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            console.log('Response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('Search results:', data);
            updateJobsTable(data.jobs);
            updatePagination(data.pagination);
            updateTotalCount(data.pagination.total_items);
            updateSearchResults(query, data.pagination.total_items);
        })
        .catch(error => {
            console.error('Search error:', error);
        });
    }
    
    function updateJobsTable(jobs) {
        console.log('Updating jobs table with:', jobs);
        console.log('jobsTableBody element:', jobsTableBody);
        
        if (!jobsTableBody) {
            console.error('jobsTableBody not found!');
            return;
        }
        
        if (jobs.length === 0) {
            jobsTableBody.innerHTML = `
                <tr>
                    <td colspan="7" class="text-center text-muted">
                        <i class="fa fa-search"></i> No jobs found matching your search criteria
                    </td>
                </tr>
            `;
            return;
        }
        
        let html = '';
        jobs.forEach(job => {
            const createdAt = job.createdAt ? new Date(job.createdAt).toLocaleDateString() : 'N/A';
            const budget = job.budget || 'Not specified';
            const location = job.client ? job.client.location : 'Unknown';
            const skills = job.skills || 'N/A';
            
            html += `
                <tr>
                    <td>
                        <input type="checkbox" class="job-checkbox" value="${job.id}">
                    </td>
                    <td>
                        <a href="/jobs/${job.id}" class="text-primary">
                            ${job.title}
                        </a>
                    </td>
                    <td>${budget}</td>
                    <td>${location}</td>
                    <td>${createdAt}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-danger delete-job-btn" data-job-id="${job.id}">
                            <i class="fa fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `;
        });
        
        jobsTableBody.innerHTML = html;
        
        // Re-attach event listeners to new checkboxes
        attachCheckboxListeners();
    }
    
    function updatePagination(pagination) {
        console.log('Updating pagination with:', pagination);
        console.log('paginationContainer element:', paginationContainer);
        
        if (!paginationContainer) {
            console.error('paginationContainer not found!');
            return;
        }
        
        if (pagination.total_pages <= 1) {
            paginationContainer.innerHTML = '';
            return;
        }
        
        let html = '';
        
        // Previous button
        if (pagination.has_previous) {
            html += `<li class="page-item"><a class="page-link" href="#" data-page="${pagination.current_page - 1}">Previous</a></li>`;
        } else {
            html += `<li class="page-item disabled"><span class="page-link">Previous</span></li>`;
        }
        
        // Page numbers
        const startPage = Math.max(1, pagination.current_page - 2);
        const endPage = Math.min(pagination.total_pages, pagination.current_page + 2);
        
        if (startPage > 1) {
            html += `<li class="page-item"><a class="page-link" href="#" data-page="1">1</a></li>`;
            if (startPage > 2) {
                html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
            }
        }
        
        for (let i = startPage; i <= endPage; i++) {
            if (i === pagination.current_page) {
                html += `<li class="page-item active"><span class="page-link">${i}</span></li>`;
            } else {
                html += `<li class="page-item"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
            }
        }
        
        if (endPage < pagination.total_pages) {
            if (endPage < pagination.total_pages - 1) {
                html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
            }
            html += `<li class="page-item"><a class="page-link" href="#" data-page="${pagination.total_pages}">${pagination.total_pages}</a></li>`;
        }
        
        // Next button
        if (pagination.has_next) {
            html += `<li class="page-item"><a class="page-link" href="#" data-page="${pagination.current_page + 1}">Next</a></li>`;
        } else {
            html += `<li class="page-item disabled"><span class="page-link">Next</span></li>`;
        }
        
        paginationContainer.innerHTML = html;
        
        // Attach pagination click handlers
        paginationContainer.addEventListener('click', function(e) {
            e.preventDefault();
            if (e.target.tagName === 'A') {
                const page = e.target.dataset.page;
                if (page) {
                    const query = searchInput.value.trim();
                    const url = new URL('{{ path("app_jobs_search") }}', window.location.origin);
                    url.searchParams.set('q', query);
                    url.searchParams.set('page', page);
                    url.searchParams.set('per_page', document.getElementById('per_page').value);
                    
                    fetch(url, {
                        method: 'GET',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        updateJobsTable(data.jobs);
                        updatePagination(data.pagination);
                        updateTotalCount(data.pagination.total_items);
                        updateSearchResults(searchInput.value.trim(), data.pagination.total_items);
                    })
                    .catch(error => {
                        console.error('Pagination error:', error);
                    });
                }
            }
        });
    }
    
    function updateTotalCount(count) {
        if (totalJobsSpan) {
            totalJobsSpan.textContent = count;
        }
    }
    
    function updateSearchResults(query, count) {
        // Hide loading indicator
        searchLoading.style.display = 'none';
        
        if (query.length > 0) {
            // Show search results count
            searchResultsCount.textContent = count;
            searchResultsInfo.style.display = 'block';
            
            // Update the alert class based on results
            if (count === 0) {
                searchResultsInfo.className = 'alert alert-warning mb-0';
                searchResultsInfo.innerHTML = '<i class="fa fa-exclamation-triangle"></i> No jobs found matching your search';
            } else {
                searchResultsInfo.className = 'alert alert-info mb-0';
                searchResultsInfo.innerHTML = `<i class="fa fa-search"></i> <span id="search-results-count">${count}</span> jobs found`;
            }
        } else {
            // Hide search results info when no query
            searchResultsInfo.style.display = 'none';
        }
    }
    
    function attachCheckboxListeners() {
        const newCheckboxes = document.querySelectorAll('.job-checkbox');
        newCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', updateBulkDeleteButton);
        });
    }
    const deleteJobBtns = document.querySelectorAll('.delete-job-btn');
    const bulkDeleteForm = document.getElementById('bulkDeleteForm');
    const deleteJobModal = document.getElementById('deleteJobModal');
    const bulkDeleteModal = document.getElementById('bulkDeleteModal');

    // Select All functionality
    selectAllCheckbox.addEventListener('change', function() {
        jobCheckboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
        });
        updateBulkDeleteButton();
    });

    // Individual checkbox change
    jobCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            updateBulkDeleteButton();
            updateSelectAllCheckbox();
        });
    });

    function updateBulkDeleteButton() {
        const checkedBoxes = document.querySelectorAll('.job-checkbox:checked');
        const count = checkedBoxes.length;
        
        selectedCountSpan.textContent = count;
        bulkDeleteBtn.disabled = count === 0;
    }

    function updateSelectAllCheckbox() {
        const totalCheckboxes = jobCheckboxes.length;
        const checkedCheckboxes = document.querySelectorAll('.job-checkbox:checked').length;
        
        if (checkedCheckboxes === 0) {
            selectAllCheckbox.indeterminate = false;
            selectAllCheckbox.checked = false;
        } else if (checkedCheckboxes === totalCheckboxes) {
            selectAllCheckbox.indeterminate = false;
            selectAllCheckbox.checked = true;
        } else {
            selectAllCheckbox.indeterminate = true;
        }
    }

    // Bulk delete functionality
    bulkDeleteBtn.addEventListener('click', function() {
        const checkedBoxes = document.querySelectorAll('.job-checkbox:checked');
        if (checkedBoxes.length === 0) {
            alert('Please select at least one job to delete.');
            return;
        }
        
        document.getElementById('bulkDeleteCount').textContent = checkedBoxes.length;
        $(bulkDeleteModal).modal('show');
    });

    document.getElementById('confirmBulkDelete').addEventListener('click', function() {
        const checkedBoxes = document.querySelectorAll('.job-checkbox:checked');
        const jobIds = Array.from(checkedBoxes).map(cb => cb.value);
        
        // Clear existing hidden inputs
        bulkDeleteForm.innerHTML = '';
        
        // Add each job ID as a separate hidden input
        jobIds.forEach(jobId => {
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'job_ids[]';
            hiddenInput.value = jobId;
            bulkDeleteForm.appendChild(hiddenInput);
        });
        
        // Submit the form
        bulkDeleteForm.submit();
    });

    // Individual delete functionality
    deleteJobBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const jobId = this.dataset.jobId;
            const jobTitle = this.dataset.jobTitle;
            
            document.getElementById('jobTitleToDelete').textContent = jobTitle;
            $(deleteJobModal).modal('show');
            
            // Store the job ID for the confirm button
            deleteJobModal.dataset.jobId = jobId;
        });
    });

    document.getElementById('confirmDeleteJob').addEventListener('click', function() {
        const jobId = deleteJobModal.dataset.jobId;
        
        // Create a form and submit it
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = `/jobs/${jobId}/delete`;
        document.body.appendChild(form);
        form.submit();
    });
});
</script>
{% endblock %}
